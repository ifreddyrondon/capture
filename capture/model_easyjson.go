// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package capture

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adEncodeGithubComIfreddyrondonGocaptureCapture(out *jwriter.Writer, in Capture) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Raw((in.ID).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"payload\":")
	if in.Payload == nil {
		out.RawString("null")
	} else {
		if *in.Payload == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v1, v2 := range *in.Payload {
				if v1 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v2))
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created_date\":")
	out.Raw((in.CreatedDate).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_modified\":")
	out.Raw((in.LastModified).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.Raw((in.Timestamp).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lat\":")
	out.Float64(float64(in.Lat))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lng\":")
	out.Float64(float64(in.Lng))
	out.RawByte('}')
}
