// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package capture

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCbca9c40EncodeGithubComIfreddyrondonCaptureCapture(out *jwriter.Writer, in Capture) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.RawText((in.ID).MarshalText())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"payload\":")
	if in.Payload == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Payload {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v3).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tags\":")
	if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v4, v5 := range in.Tags {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.String(string(v5))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.Raw((in.Timestamp).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"createdAt\":")
	out.Raw((in.CreatedAt).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"updatedAt\":")
	out.Raw((in.UpdatedAt).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lat\":")
	if in.LAT == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.LAT))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lng\":")
	if in.LNG == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.LNG))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"elevation\":")
	if in.Elevation == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Elevation))
	}
	out.RawByte('}')
}
