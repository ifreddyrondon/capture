// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package geocoding

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA2deb046DecodeGithubComIfreddyrondonCaptureGeocoding(in *jlexer.Lexer, out *pointJSON) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			if in.IsNull() {
				in.Skip()
				out.LAT = nil
			} else {
				if out.LAT == nil {
					out.LAT = new(float64)
				}
				*out.LAT = float64(in.Float64())
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "lng":
			if in.IsNull() {
				in.Skip()
				out.LNG = nil
			} else {
				if out.LNG == nil {
					out.LNG = new(float64)
				}
				*out.LNG = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "elevation":
			if in.IsNull() {
				in.Skip()
				out.Elevation = nil
			} else {
				if out.Elevation == nil {
					out.Elevation = new(float64)
				}
				*out.Elevation = float64(in.Float64())
			}
		case "altitude":
			if in.IsNull() {
				in.Skip()
				out.Altitude = nil
			} else {
				if out.Altitude == nil {
					out.Altitude = new(float64)
				}
				*out.Altitude = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
