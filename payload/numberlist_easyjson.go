// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package numberlist

import (
	"encoding/json"

	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComIfreddyrondonGocapturePayload(in *jlexer.Lexer, out *jsonPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cap":
			if in.IsNull() {
				in.Skip()
				out.Cap = nil
			} else {
				in.Delim('[')
				if out.Cap == nil {
					if !in.IsDelim(']') {
						out.Cap = make([]float64, 0, 8)
					} else {
						out.Cap = []float64{}
					}
				} else {
					out.Cap = (out.Cap)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float64
					v1 = float64(in.Float64())
					out.Cap = append(out.Cap, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "captures":
			if in.IsNull() {
				in.Skip()
				out.Captures = nil
			} else {
				in.Delim('[')
				if out.Captures == nil {
					if !in.IsDelim(']') {
						out.Captures = make([]float64, 0, 8)
					} else {
						out.Captures = []float64{}
					}
				} else {
					out.Captures = (out.Captures)[:0]
				}
				for !in.IsDelim(']') {
					var v2 float64
					v2 = float64(in.Float64())
					out.Captures = append(out.Captures, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]float64, 0, 8)
					} else {
						out.Data = []float64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v3 float64
					v3 = float64(in.Float64())
					out.Data = append(out.Data, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				in.Delim('[')
				if out.Payload == nil {
					if !in.IsDelim(']') {
						out.Payload = make([]float64, 0, 8)
					} else {
						out.Payload = []float64{}
					}
				} else {
					out.Payload = (out.Payload)[:0]
				}
				for !in.IsDelim(']') {
					var v4 float64
					v4 = float64(in.Float64())
					out.Payload = append(out.Payload, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
